test <- bats %>%
mutate(`cave obligate?` = ! AUTO.ID %in% non_cave_obligate) %>%
group_by(monthN, `cave obligate?`, year) %>%
filter(monthN == 12) %>%
tally()
ggplot(data = test,
aes(x = year,
y = n,
color = `cave obligate?`))+
geom_line()
# theres a sharp dip in frequencies of both bats in 2020. interesting.
# Chunk 7
# simple graph of overall amount of recorded calls to start the day
overall_bats <- bats %>%
group_by(AUTO.ID) %>%
tally()
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
install.packages("scales")
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n,
fill = 'blue'))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n,
fill = 'light_pink'))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n,
color = "green"))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
install.packages("plotly")
library(plotly)
fig <- fig %>%
add_trace(
x = c(1:5),
y = rnorm(5, mean = 5),
text = c("Text A", "Text B", "Text C", "Text D", "Text E"),
hoverinfo = 'text',
marker = list(color='green'),
showlegend = F
)
fig <- plot_ly(type = 'scatter', mode = 'markers')
fig <- fig %>%
add_trace(
x = c(1:5),
y = rnorm(5, mean = 5),
text = c("Text A", "Text B", "Text C", "Text D", "Text E"),
hoverinfo = 'text',
marker = list(color='green'),
showlegend = F
)
View(fig)
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)+
add_trace(
x = c(1:5),
y = rnorm(5, mean = 5),
text = c("Text A", "Text B", "Text C", "Text D", "Text E"),
hoverinfo = 'text',
marker = list(color='green'),
showlegend = F
)
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
plotly ?
gg <- ggplotly(g, dynamicTicks = "y")
gg <- ggplotly(g, dynamicTicks = "y")
style(gg, hoveron = "points", hoverinfo = "x+y+text", hoverlabel = list(bgcolor = "white"))
gg <- ggplotly(g, dynamicTicks = "y")
ggplotly(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
style(gg, hoveron = "points", hoverinfo = "x+y+text", hoverlabel = list(bgcolor = "white"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
ggplotly(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
library(scales)
library(plotly)
ggplotly(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
ggplotly(p = ggplot2, data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))
ggplotly(p = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))
bats %>%
group_by(AUTO.ID, sensor, date) %>%
filter(AUTO.ID == c("MYOLUC", "EPTFUS")) %>%
tally()
bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID == c("MYOLUC", "EPTFUS")) %>%
tally()
bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID = c("MYOLUC", "EPTFUS")) %>%
tally()
bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID == MYOLUC, AUTO.ID == EPTFUS) %>%
tally()
bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID == "MYOLUC", AUTO.ID == "EPTFUS") %>%
tally()
big_v_lil <-bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID == "MYOLUC", AUTO.ID == "EPTFUS") %>%
tally()
big_v_lil <- bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID == "MYOLUC", AUTO.ID == "EPTFUS") %>%
tally()
View(big_v_lil)
big_v_lil <- bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID == "MYOLUC") %>%
tally()
View(big_v_lil)
filter(AUTO.ID == c("MYOLUC","EPTFUS") %>%
group_by(AUTO.ID, sensor, DATE) %>%
View(big_v_lil)
View(big_v_lil)
View(big_v_lil)
tail(big_v_lil)
filter(AUTO.ID %in% c("MYOLUC","EPTFUS") %>%
group_by(AUTO.ID, sensor, DATE) %>%
big_v_lil <- bats %>%
tally()
# my goal here is to try and understand trends between EPTFUS and MYOLUC, maybe a cute lil facet wrap for sensors so that I can see if any of them are/were in the same place. anyways
big_v_lil <- bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID %in% c("MYOLUC","EPTFUS") %>%
tally()
View(big_v_lil)
filter(AUTO.ID %in% c('MYOLUC','EPTFUS') %>%
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
source('dataRead.R')
# Chunk 2
# species call counts by year -----
No.ID <- c('NoId', 'NoID', 'Noise')
bats.time <- bats %>%
filter(! AUTO.ID %in% No.ID, year < 2022) %>%
group_by(year, AUTO.ID) %>%
tally()
ggplot(data=bats.time, aes(x=year, y=n, color=AUTO.ID) )+
geom_line()+
labs(title = 'Number of Total Calls Per Species',
subtitle = "From 2017-2021",
x = 'Year', y = 'Number of Calls')
# Chunk 3
# my goal is to group everything and then use summarize so that I can have the total frequency of the bats by species across months.
freq_by_month <- bats %>%
group_by(year, monthN, AUTO.ID) %>%
filter(! AUTO.ID %in% No.ID) %>%
summarize(frequencies = n())
# With the graph, I want to filter to keep only specific year and species combinations for clarity, and I want months to be on the x-axis and the number of calls recorded on the y.
chosen_species <- levels(factor(freq_by_month$AUTO.ID))
ggplot(data = freq_by_month %>% filter(AUTO.ID %in% chosen_species, year == 2017),
aes(x = monthN,
y = frequencies,
color = AUTO.ID))+
geom_line()+
labs(title = 'Frequencies by Month',
subtitle = 'During 2017',
x = 'Month by Number',
y = 'Number of Calls')
# here i just wanted to look at the total number of recordings across all species
bats %>%
group_by(AUTO.ID) %>%
tally()
# Chunk 4
# account for number of sensors active on each date -----
bats.daily <- bats %>%
group_by(DATE) %>%
mutate( nSensors = length(unique(sensor)) )
bats.daily <- bats.daily %>%
filter(! AUTO.ID %in% No.ID) %>%
group_by(DATE,AUTO.ID) %>%
summarize( count = n(),
relFreq = count/nSensors )
bats.daily <- distinct(bats.daily)
chosen_species <- levels(factor(bats.daily$AUTO.ID))
# wanting to graph just to see what they all look like over time
ggplot(data = bats.daily %>% filter(AUTO.ID %in% chosen_species)) +
geom_line(aes( x = DATE,
y = count,
color = AUTO.ID,
alpha = 0.7))
# now i would like to look at just MYOTIS species
ggplot(data = bats.daily %>% filter(AUTO.ID == 'MYOLUC'))+
geom_line(aes(x = DATE,
y = count,
color = 'pink')) +
labs(title = 'Little Brown Bat Frequencies',
subtitle = 'Across all Available Years',
x = 'Year',
y = 'Frequency')
# Chunk 5
# the goal here was to create a data frame containing the amount of frequencies recorded of a specific species at a specific sensor
selected_year <- 2017
bats.ym <- bats %>%
group_by(year, month, AUTO.ID, sensor) %>%
tally()
# then we graphed it and facet-wrapped by sensor to look into each individual one with available data
ggplot(data = bats.ym %>% filter(year == selected_year),
aes(x = month,
y = n,
fill = AUTO.ID))+
geom_col(position = "dodge")+
facet_wrap(~sensor)
# Chunk 6
# want to create a column of cave obligates versus non-cave obligates to observe their activity
cave_obligate = c('PERSUB', 'MYOLEI', 'MYOAUS', 'MYOLUC', 'MYOSOD', 'MYOGRI', 'MYOSEP')
non_cave_obligate = c('LASBOR', 'NYCHUM', 'EPTFUS', 'LASNOC', 'LASCIN', 'CORRAF')
test <- bats %>%
mutate(`cave obligate?` = ! AUTO.ID %in% non_cave_obligate) %>%
group_by(monthN, `cave obligate?`, year) %>%
filter(monthN == 12) %>%
tally()
ggplot(data = test,
aes(x = year,
y = n,
color = `cave obligate?`))+
geom_line()
# theres a sharp dip in frequencies of both bats in 2020. interesting.
# Chunk 7
# simple graph of overall amount of recorded calls to start the day
overall_bats <- bats %>%
group_by(AUTO.ID) %>%
tally()
#i am trying my darndest to understand plotly. the code below is obselete for now, ignore it
ggplotly(p = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))
# this is an actual plot for the overall calls
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
# Chunk 8
# my goal here is to try and understand trends between EPTFUS and MYOLUC, maybe a cute lil facet wrap for sensors so that I can see if any of them are/were in the same place. anyways
big_v_lil <- bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID %in% c('MYOLUC','EPTFUS') %>%
tally()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
source('dataRead.R')
# Chunk 2
# species call counts by year -----
No.ID <- c('NoId', 'NoID', 'Noise')
bats.time <- bats %>%
filter(! AUTO.ID %in% No.ID, year < 2022) %>%
group_by(year, AUTO.ID) %>%
tally()
ggplot(data=bats.time, aes(x=year, y=n, color=AUTO.ID) )+
geom_line()+
labs(title = 'Number of Total Calls Per Species',
subtitle = "From 2017-2021",
x = 'Year', y = 'Number of Calls')
# Chunk 3
# my goal is to group everything and then use summarize so that I can have the total frequency of the bats by species across months.
freq_by_month <- bats %>%
group_by(year, monthN, AUTO.ID) %>%
filter(! AUTO.ID %in% No.ID) %>%
summarize(frequencies = n())
# With the graph, I want to filter to keep only specific year and species combinations for clarity, and I want months to be on the x-axis and the number of calls recorded on the y.
chosen_species <- levels(factor(freq_by_month$AUTO.ID))
ggplot(data = freq_by_month %>% filter(AUTO.ID %in% chosen_species, year == 2017),
aes(x = monthN,
y = frequencies,
color = AUTO.ID))+
geom_line()+
labs(title = 'Frequencies by Month',
subtitle = 'During 2017',
x = 'Month by Number',
y = 'Number of Calls')
# here i just wanted to look at the total number of recordings across all species
bats %>%
group_by(AUTO.ID) %>%
tally()
# Chunk 4
# account for number of sensors active on each date -----
bats.daily <- bats %>%
group_by(DATE) %>%
mutate( nSensors = length(unique(sensor)) )
bats.daily <- bats.daily %>%
filter(! AUTO.ID %in% No.ID) %>%
group_by(DATE,AUTO.ID) %>%
summarize( count = n(),
relFreq = count/nSensors )
bats.daily <- distinct(bats.daily)
chosen_species <- levels(factor(bats.daily$AUTO.ID))
# wanting to graph just to see what they all look like over time
ggplot(data = bats.daily %>% filter(AUTO.ID %in% chosen_species)) +
geom_line(aes( x = DATE,
y = count,
color = AUTO.ID,
alpha = 0.7))
# now i would like to look at just MYOTIS species
ggplot(data = bats.daily %>% filter(AUTO.ID == 'MYOLUC'))+
geom_line(aes(x = DATE,
y = count,
color = 'pink')) +
labs(title = 'Little Brown Bat Frequencies',
subtitle = 'Across all Available Years',
x = 'Year',
y = 'Frequency')
# Chunk 5
# the goal here was to create a data frame containing the amount of frequencies recorded of a specific species at a specific sensor
selected_year <- 2017
bats.ym <- bats %>%
group_by(year, month, AUTO.ID, sensor) %>%
tally()
# then we graphed it and facet-wrapped by sensor to look into each individual one with available data
ggplot(data = bats.ym %>% filter(year == selected_year),
aes(x = month,
y = n,
fill = AUTO.ID))+
geom_col(position = "dodge")+
facet_wrap(~sensor)
# Chunk 6
# want to create a column of cave obligates versus non-cave obligates to observe their activity
cave_obligate = c('PERSUB', 'MYOLEI', 'MYOAUS', 'MYOLUC', 'MYOSOD', 'MYOGRI', 'MYOSEP')
non_cave_obligate = c('LASBOR', 'NYCHUM', 'EPTFUS', 'LASNOC', 'LASCIN', 'CORRAF')
test <- bats %>%
mutate(`cave obligate?` = ! AUTO.ID %in% non_cave_obligate) %>%
group_by(monthN, `cave obligate?`, year) %>%
filter(monthN == 12) %>%
tally()
ggplot(data = test,
aes(x = year,
y = n,
color = `cave obligate?`))+
geom_line()
# theres a sharp dip in frequencies of both bats in 2020. interesting.
# Chunk 7
# simple graph of overall amount of recorded calls to start the day
overall_bats <- bats %>%
group_by(AUTO.ID) %>%
tally()
#i am trying my darndest to understand plotly. the code below is obselete for now, ignore it
ggplotly(p = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))
# this is an actual plot for the overall calls
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
# Chunk 8
# my goal here is to try and understand trends between EPTFUS and MYOLUC, maybe a cute lil facet wrap for sensors so that I can see if any of them are/were in the same place. anyways
big_v_lil <- bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID %in% c('MYOLUC','EPTFUS')) %>%
tally()
View(big_v_lil)
View(big_v_lil)
ggplot(data = big_v_lil)+
geom_line(aes(x = DATE,
y = n))+
labs(title = 'EPTFUS vs. MYOLUC Presence',
x = 'Date',
y = 'Number of Recordings')+
facet_wrap(~sensor)
ggplot(data = big_v_lil)+
geom_line(aes(x = DATE,
y = n,
color = AUTO.ID))+
labs(title = 'EPTFUS vs. MYOLUC Presence',
x = 'Date',
y = 'Number of Recordings')+
facet_wrap(~sensor)
ggplot(data = big_v_lil %>% filter(sensor = "C22_S9"))+
geom_line(aes(x = DATE,
y = n,
color = AUTO.ID))+
labs(title = 'EPTFUS vs. MYOLUC Presence',
x = 'Date',
y = 'Number of Recordings')
ggplot(data = big_v_lil %>% filter(sensor == "C22_S9"))+
geom_line(aes(x = DATE,
y = n,
color = AUTO.ID))+
labs(title = 'EPTFUS vs. MYOLUC Presence',
x = 'Date',
y = 'Number of Recordings')
myotis <- bats %>%
group_by(AUTO.ID, sensor, DATE, monthN) %>%
filter(AUTO.ID %in% c("MYOLUC","MYOLEI", "MYOSOD", "MYOAUS", "MYOSEP", "MYOGRI")) %>%
tally()
View(myotis)
library(ggthemes)
ggplot(data = myotis)+
geom_line(aes(x = DATE,
y = n,
color = AUTO.ID))+
labs(title = 'MYOTIS Species Over Time',
x = 'Time',
y = 'Number of Recordings')
ggplot(data = myotis)+
geom_line(aes(x = DATE,
y = n,
color = AUTO.ID))+
labs(title = 'MYOTIS Species Over Time',
x = 'Time',
y = 'Number of Recordings')+
facet_wrap(~AUTO>ID)
ggplot(data = myotis)+
geom_line(aes(x = DATE,
y = n,
color = AUTO.ID))+
labs(title = 'MYOTIS Species Over Time',
x = 'Time',
y = 'Number of Recordings')+
facet_wrap(~AUTO.ID)
library(shiny)
runApp('~/Documents/datalab/SecondShiny')
runApp('~/Documents/datalab/SecondShiny')
runApp('~/Documents/datalab/practice_dash')
runApp('~/Documents/datalab/practice_dash')
runApp('~/Documents/datalab/practice_dash')
runApp('~/Documents/datalab/practice_dash')
runApp('~/Documents/datalab/practice_dash')
runApp('~/Documents/datalab/practice_dash')
runApp('~/Documents/datalab/practice_dash')
runApp('~/Documents/datalab/fake_fencing')
runApp('~/Documents/datalab/FirstShiny/app1.R')
runApp('~/Documents/datalab/practice_dash')
runApp('~/Documents/datalab/FirstShiny/app1.R')
View(bats)
View(bats)
View(bats)
View(bats)
View(bats.daily)
View(bats.daily)
View(bats.time)
View(bats.time)
View(bats.time)
View(bats.time)
View(bats.time)
View(bats.time)
runApp('~/Documents/datalab/practice_dash')
