View(chat)
View(chat@data)
map_pal <- colorNumeric(
palette = brewer.pal(n = 9, 'Purples'),
domain= chat@data$km)
leaflet() %>%
addTiles() %>%
addPolygons(data = chat,
fillColor = ~map_pal(km),
fillOpacity = 0.9,
weight = 0.5,
color = 'whitex')
leaflet() %>%
addTiles() %>%
addPolygons(data = chat,
fillColor = ~map_pal(km),
fillOpacity = 0.9,
weight = 0.5,
color = 'white')
usa <- getData('alt', country='USA', mask=TRUE)
plot(usa)
plot(usa[[1]])
plot(usa[[2]])
# get a vector object for the state of tn
states <- getData(name = 'GADM', level = 1, country = 'USA')
plot(tn)
# Get a VECTOR object for the state of Tennessee
states <- getData(name = 'GADM', level = 1, country = 'USA')
# Subset for just Tennessee
tn <- states[states$NAME_1 == 'Tennessee',]
plot(tn)
#Tennessee elevation
tn_elev <- crop(usa[[1]], tn)
plot(tn_elev)
#Mask the non-Tennessee parts
tn_elev <- mask(tn_elev, tn)
plot(tn_elev)
shiny::runApp('Documents/datalab/data_entry')
library(shiny)
library(tidyverse)
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel('The Food and The Furious: Dining Activity Trends in Sewanee'),
fluidRow(column(6, 'first row first column'),
column(6, 'first row second column')),
fluidRow(column(6, 'second row, first column'),
column(6, 'second row, second column'))
)
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
runApp('Documents/datalab/data_entry')
library(shiny)
library(tidyverse)
read.csv('https://docs.google.com/spreadsheets/d/161MfIHC-6iwkpx85Ce2-zV52F4LNET2sOhgl0_zl3kM/edit?usp=sharing')
runApp('Documents/datalab/fake_fencing')
runApp('Documents/datalab/fake_fencing')
runApp('Documents/datalab/fake_fencing')
runApp('Documents/datalab/fake_fencing')
runApp('Documents/datalab/fake_fencing')
runApp('Documents/datalab/fake_fencing')
shiny::runApp('Documents/datalab/fake_fencing')
runApp('Documents/datalab/fake_fencing')
runApp('Documents/datalab/fake_fencing')
runApp('Documents/datalab/fake_fencing')
q()
shiny::runApp('Documents/datalab/bats/Bats-Wireframe')
setwd("~/Documents/datalab/bats")
shiny::runApp('Bats-Wireframe')
bats <- readRDS('../bats.RData')
source('dataRead.R')
library(tidyverse)
library(lubridate)
library(readxl)
library(scales)
library(plotly)
library(ggthemes)
overall_bats <- bats %>%
group_by(AUTO.ID) %>%
tally()
View(bats)
# species call counts by year -----
No.ID <- c('NoId', 'NoID', 'Noise')
bats.time <- bats %>%
filter(! AUTO.ID %in% No.ID, year < 2022) %>%
group_by(year, AUTO.ID) %>%
tally()
ggplot(data=bats.time, aes(x=year, y=n, color=AUTO.ID) )+
geom_line()+
labs(title = 'Number of Total Calls Per Species',
subtitle = "From 2017-2021",
x = 'Year', y = 'Number of Calls')
# my goal is to group everything and then use summarize so that I can have the total frequency of the bats by species across months.
freq_by_month <- bats %>%
group_by(year, monthN, AUTO.ID) %>%
filter(! AUTO.ID %in% No.ID) %>%
summarize(frequencies = n())
# With the graph, I want to filter to keep only specific year and species combinations for clarity, and I want months to be on the x-axis and the number of calls recorded on the y.
chosen_species <- levels(factor(freq_by_month$AUTO.ID))
ggplot(data = freq_by_month %>% filter(AUTO.ID %in% chosen_species, year == 2017),
aes(x = monthN,
y = frequencies,
color = AUTO.ID))+
geom_line()+
labs(title = 'Frequencies by Month',
subtitle = 'During 2017',
x = 'Month by Number',
y = 'Number of Calls')
# here i just wanted to look at the total number of recordings across all species
bats %>%
group_by(AUTO.ID) %>%
tally()
# account for number of sensors active on each date -----
bats.daily <- bats %>%
group_by(DATE) %>%
mutate( nSensors = length(unique(sensor)) )
bats.daily <- bats.daily %>%
filter(! AUTO.ID %in% No.ID) %>%
group_by(DATE,AUTO.ID) %>%
summarize( count = n(),
relFreq = count/nSensors )
bats.daily <- distinct(bats.daily)
chosen_species <- levels(factor(bats.daily$AUTO.ID))
# wanting to graph just to see what they all look like over time
ggplot(data = bats.daily %>% filter(AUTO.ID %in% chosen_species)) +
geom_line(aes( x = DATE,
y = count,
color = AUTO.ID,
alpha = 0.7))
# now i would like to look at just MYOTIS species
ggplot(data = bats.daily %>% filter(AUTO.ID == 'MYOLUC'))+
geom_line(aes(x = DATE,
y = count,
color = 'pink')) +
labs(title = 'Little Brown Bat Frequencies',
subtitle = 'Across all Available Years',
x = 'Year',
y = 'Frequency')
# the goal here was to create a data frame containing the amount of frequencies recorded of a specific species at a specific sensor
selected_year <- 2017
bats.ym <- bats %>%
group_by(year, month, AUTO.ID, sensor) %>%
tally()
# then we graphed it and facet-wrapped by sensor to look into each individual one with available data
ggplot(data = bats.ym %>% filter(year == selected_year),
aes(x = month,
y = n,
fill = AUTO.ID))+
geom_col(position = "dodge")+
facet_wrap(~sensor)
# want to create a column of cave obligates versus non-cave obligates to observe their activity
cave_obligate = c('PERSUB', 'MYOLEI', 'MYOAUS', 'MYOLUC', 'MYOSOD', 'MYOGRI', 'MYOSEP')
non_cave_obligate = c('LASBOR', 'NYCHUM', 'EPTFUS', 'LASNOC', 'LASCIN', 'CORRAF')
test <- bats %>%
mutate(`cave obligate?` = ! AUTO.ID %in% non_cave_obligate) %>%
group_by(monthN, `cave obligate?`, year) %>%
filter(monthN == 12) %>%
tally()
ggplot(data = test,
aes(x = year,
y = n,
color = `cave obligate?`))+
geom_line()
# theres a sharp dip in frequencies of both bats in 2020. interesting.
# simple graph of overall amount of recorded calls to start the day
overall_bats <- bats %>%
group_by(AUTO.ID) %>%
tally()
#i am trying my darndest to understand plotly. the code below is obselete for now, ignore it
ggplot(p = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))
# this is an actual plot for the overall calls
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
# my goal here is to try and understand trends between EPTFUS and MYOLUC, maybe a cute lil facet wrap for sensors so that I can see if any of them are/were in the same place. anyways
big_v_lil <- bats %>%
group_by(AUTO.ID, sensor, DATE) %>%
filter(AUTO.ID %in% c('MYOLUC','EPTFUS')) %>%
tally()
ggplot(data = big_v_lil)+
geom_line(aes(x = DATE,
y = n,
color = AUTO.ID))+
labs(title = 'EPTFUS vs. MYOLUC Presence',
x = 'Date',
y = 'Number of Recordings')+
facet_wrap(~sensor)
# taking a closer look at one of the censors with a lot of activity
ggplot(data = big_v_lil %>% filter(sensor == "C22_S9"))+
geom_line(aes(x = DATE,
y = n,
color = AUTO.ID))+
labs(title = 'EPTFUS vs. MYOLUC Presence',
x = 'Date',
y = 'Number of Recordings')
# i would love if we put this on the dashboard, if you could choose which sensor graph youre looking at
# How have the MYOTIS species fluctuated over time?
myotis <- bats %>%
group_by(AUTO.ID, sensor, DATE, monthN) %>%
filter(AUTO.ID %in% c("MYOLUC","MYOLEI", "MYOSOD", "MYOAUS", "MYOSEP", "MYOGRI")) %>%
tally()
ggplot(data = myotis)+
geom_line(aes(x = DATE,
y = n,
color = AUTO.ID))+
labs(title = 'MYOTIS Species Over Time',
x = 'Time',
y = 'Number of Recordings')+
facet_wrap(~AUTO.ID)
View(overall_bats)
View(bats)
# simple graph of overall amount of recorded calls to start the day
overall_bats <- bats %>%
group_by(AUTO.ID) %>%
tally()
#i am trying my darndest to understand plotly. the code below is obselete for now, ignore it
ggplot(p = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))
# this is an actual plot for the overall calls
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
ggplot(p = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))
# simple graph of overall amount of recorded calls to start the day
overall_bats <- bats %>%
group_by(AUTO.ID) %>%
tally()
#i am trying my darndest to understand plotly. the code below is obselete for now, ignore it
# this is an actual plot for the overall calls
ggplot(data = overall_bats)+
geom_col(aes(x = AUTO.ID,
y = n))+
labs(title = 'Total Recordings by Species',
x = 'Species',
y = 'Number of Calls')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_y_continuous(labels = comma)
runApp('Bats-Wireframe')
# account for number of sensors active on each date -----
bats.daily <- bats %>%
group_by(DATE) %>%
mutate( nSensors = length(unique(sensor)) )
bats.daily <- bats.daily %>%
filter(! AUTO.ID %in% No.ID) %>%
group_by(DATE,AUTO.ID) %>%
summarize( count = n(),
relFreq = count/nSensors )
bats.daily <- distinct(bats.daily)
chosen_species <- levels(factor(bats.daily$AUTO.ID))
# wanting to graph just to see what they all look like over time
ggplot(data = bats.daily %>% filter(AUTO.ID %in% chosen_species)) +
geom_line(aes( x = DATE,
y = count,
color = AUTO.ID,
alpha = 0.7))
# now i would like to look at just MYOTIS species
ggplot(data = bats.daily %>% filter(AUTO.ID == 'MYOLUC'))+
geom_line(aes(x = DATE,
y = count),
color = 'pink') +
labs(title = 'Little Brown Bat Frequencies',
subtitle = 'Across all Available Years',
x = 'Year',
y = 'Frequency')
# account for number of sensors active on each date -----
bats.daily <- bats %>%
group_by(DATE) %>%
mutate( nSensors = length(unique(sensor)) )
bats.daily <- bats.daily %>%
filter(! AUTO.ID %in% No.ID) %>%
group_by(DATE,AUTO.ID) %>%
summarize( count = n(),
relFreq = count/nSensors )
bats.daily <- distinct(bats.daily)
chosen_species <- levels(factor(bats.daily$AUTO.ID))
# wanting to graph just to see what they all look like over time
ggplot(data = bats.daily %>% filter(AUTO.ID %in% chosen_species)) +
geom_line(aes( x = DATE,
y = count,
color = AUTO.ID,
alpha = 0.7))
# now i would like to look at just MYOTIS species
ggplot(data = bats.daily %>% filter(AUTO.ID == 'MYOLUC'))+
geom_line(aes(x = DATE,
y = count),
color = 'blue') +
labs(title = 'Little Brown Bat Frequencies',
subtitle = 'Across all Available Years',
x = 'Year',
y = 'Frequency')
test <- bats %>%
mutate(`cave obligate?` = ! AUTO.ID %in% non_cave_obligate) %>%
group_by(monthN, `cave obligate?`, year) %>%
filter(monthN == 12) %>%
tally()
ggplot(data = test,
aes(x = year,
y = n,
color = `cave obligate?`))+
geom_line()
View(test)
setwd("~/Documents/datalab/bats")
source('dataRead.R')
bats.per <- bats %>%
filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)) %>%
group_by(year) %>%
mutate(tot_bat = n())
bats.per <- bats.per %>%
group_by(year, AUTO.ID) %>%
summarise(prop = n()/tot_bat)
View(bats.per)
bats.per <- distinct(bats.per)
View(bats.per)
ggplot(data = bats.per)+
geom_line(aes(x = year,
y = prop,
color = AUTO.ID))
ggplot(data = bats)+
geom_bar(aes(x = year,
fill = AUTO.ID),
position = 'fill')
ggplot(data = bats %>% filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)))+
geom_bar(aes(x = year,
fill = AUTO.ID),
position = 'fill')
something <- ggplot(data = bats %>% filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)))+
geom_bar(aes(x = year,
fill = AUTO.ID),
position = 'fill')
install.packages("plotly")
install.packages("plotly")
library(ggplotly)
library(plotly)
ggplotly(something)
ggplotly(something) %>%
add_trace(
hoverinfo = 'year'
)
ggplotly(something) %>%
add_trace(
hoverinfo = 'bats$year'
)
test <- bats %>%
mutate(`cave obligate?` = ! AUTO.ID %in% non_cave_obligate) %>%
group_by(monthN, `cave obligate?`, year) %>%
filter(monthN == 12) %>%
tally()
ggplot(data = test,
aes(x = year,
y = n,
color = `cave obligate?`))+
geom_line()
ggplotly(something) %>%
add_trace(
hoverinfo = 'bats$year'
)
something <- ggplot(data = bats %>% filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)))+
geom_bar(aes(x = year,
fill = AUTO.ID,
text = 'test'),
position = 'fill')
View(something)
ggplotly(something)
View(bats)
something <- ggplot(data = bats %>% filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)))+
geom_bar(aes(x = year,
fill = AUTO.ID,
text = COMPARTMENT),
position = 'fill')
ggplotly(something)
ggplot(data = bats.per)+
geom_line(aes(x = year,
y = prop,
color = AUTO.ID))
ggplotly(something)
ggplotly(something, tooltip = c("fill", "text"))
something <- ggplot(data = bats %>% filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)))+
geom_bar(aes(x = year,
fill = AUTO.ID,
text = paste("Compartment:", COMPARTMENT)),
position = 'fill')
ggplotly(something, tooltip = c("fill", "text"))
something <- ggplot(data = bats %>% filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)))+
geom_bar(aes(x = year,
fill = AUTO.ID,
text = paste("Compartment:", COMPARTMENT,
"Percentage:", scales::percent(AUTO.ID))),
position = 'fill')
ggplotly(something, tooltip = c("fill", "text"))
something <- ggplot(data = bats %>% filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)))+
geom_bar(aes(x = year,
fill = AUTO.ID,
text = paste("Compartment:", COMPARTMENT,
"Percentage:", scales::percent(as.factor(AUTO.ID)))),
position = 'fill')
ggplotly(something, tooltip = c("fill", "text"))
View(bats.per)
bats.per <- bats %>%
filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)) %>%
group_by(year) %>%
mutate(tot_bat = n())
bats.per <- bats.per %>%
group_by(year, AUTO.ID) %>%
summarise(prop = n()/tot_bat,
perc = prop*10)
bats.per <- distinct(bats.per)
something <- ggplot(data = bats.per)+
geom_col(aes(x = year,
fill = AUTO.ID,
text = paste("Compartment:", COMPARTMENT)))
something <- ggplot(data = bats.per)+
geom_col(aes(x = year,
fill = AUTO.ID,
text = paste("Compartment:", COMPARTMENT)))
ggplotly(something, tooltip = c("fill", "text"))
bats.prop <- bats %>%
filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)) %>%
group_by(year) %>%
mutate(tot_bat = n())
bats.prop <- bats %>%
filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)) %>%
group_by(year) %>%
mutate(tot_bat = n())
bats.prop <- bats.prop %>%
group_by(year, AUTO.ID) %>%
summarise(prop = n()/tot_bat,
perc = prop*10)
bats.prop <- distinct(bats.prop)
# trying to learn plotly
bats.per <- bats %>%
filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)) %>%
group_by(year) %>%
mutate(tot_bat = n())
bats.per <- bats.per %>%
group_by(year, AUTO.ID, COMPARTMENT) %>%
summarise(prop = n()/tot_bat,
perc = prop*10)
bats.per <- distinct(bats.per)
something <- ggplot(data = bats.per)+
geom_col(aes(x = year,
fill = AUTO.ID,
text = paste("Compartment:", COMPARTMENT)))
ggplotly(something, tooltip = c("fill", "text"))
View(bats.per)
something <- ggplot(data = bats.per)+
geom_col(aes(x = year,
y = perc,
fill = AUTO.ID,
text = paste("Compartment:", COMPARTMENT)))
ggplotly(something, tooltip = c("fill", "text"))
# trying to learn plotly
bats.per <- bats %>%
filter(! grepl('Noise', AUTO.ID, ignore.case = TRUE)) %>%
group_by(year, COMPARTMENT) %>%
mutate(tot_bat = n())
bats.per <- bats.per %>%
group_by(year, AUTO.ID, COMPARTMENT) %>%
summarise(prop = n()/tot_bat,
perc = prop*10)
bats.per <- distinct(bats.per)
something <- ggplot(data = bats.per)+
geom_col(aes(x = year,
y = perc,
fill = AUTO.ID,
text = paste("Compartment:", COMPARTMENT)))
ggplotly(something, tooltip = c("fill", "text"))
runApp('Bats-Wireframe')
ggplot(data = test,
aes(x = year,
y = n,
color = `cave obligate?`))+
geom_line()
runApp('Bats-Wireframe')
